AWSTemplateFormatVersion: "2010-09-09"
Description: Combined CloudFormation Template for Big Data Lab with Kafka, Glue, and S3 Integration.

Resources:
  # VPC
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "MyVPC"

  # Public Subnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: 
        Fn::GetAtt:
          - MyVPC
          - VpcId
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "PublicSubnet"

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "MyInternetGateway"

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: 
        Fn::GetAtt:
          - MyVPC
          - VpcId
      InternetGatewayId: 
        Fn::GetAtt:
          - InternetGateway
          - InternetGatewayId

  # Elastic IP for NAT Gateway
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Name"
          Value: "BigData-ElasticIP"

  # NAT Gateway
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: 
        Fn::GetAtt:
          - ElasticIP
          - AllocationId
      SubnetId: 
        Fn::GetAtt:
          - PublicSubnet
          - SubnetId
      Tags:
        - Key: "Name"
          Value: "BigData-NAT-Gateway"

  # Route Table for Public Subnet
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: 
        Fn::GetAtt:
          - MyVPC
          - VpcId
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: 
        Fn::GetAtt:
          - RouteTable
          - RouteTableId
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: 
        Fn::GetAtt:
          - InternetGateway
          - InternetGatewayId

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: 
        Fn::GetAtt:
          - PublicSubnet
          - SubnetId
      RouteTableId: 
        Fn::GetAtt:
          - RouteTable
          - RouteTableId

  # Security Group
  DefaultSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Default security group for EC2 and Glue"
      VpcId: 
        Fn::GetAtt:
          - MyVPC
          - VpcId
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 9092
          ToPort: 9092
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8000
          ToPort: 8000
          CidrIp: "tcp"

      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  # S3 Bucket
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      Tags:
        - Key: "Name"
          Value: "BigDataBucket"

  # EC2 Instance for Kafka
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.medium"
      ImageId: "ami-012967cc5a8c9f891"
      SubnetId: 
        Fn::GetAtt:
          - PublicSubnet
          - SubnetId
      SecurityGroupIds:
        - Fn::GetAtt:
            - DefaultSecurityGroup
            - GroupId
      KeyName: "vockey"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Setting up Big Data Lab..."
          
          echo "Installing tools..."
          sudo yum update -y
          sudo yum install -y java wget maven git python pip
        
          cd /home/ec2-user
          
          echo "Cloning the repository..."
          git clone https://github.com/evertonmj/crypto-big-data-pipeline.git
          chmod -R 777 crypto-big-data-pipeline/

          echo "Installing Kafka..."
          wget https://downloads.apache.org/kafka/3.8.0/kafka_2.12-3.8.0.tgz
          tar -xzf kafka_2.12-3.8.0.tgz
          sudo chmod -R 777 kafka_2.12-3.8.0
          sudo chown -R ec2-user:ec2-user kafka_2.12-3.8.0
          echo "Installing Kafka UI..."
          wget https://github.com/provectus/kafka-ui/releases/download/v0.7.2/kafka-ui-api-v0.7.2.jar
          mkdir -p /home/ec2-user/conf
          cd /home/ec2-user/
          cp /home/ec2-user/crypto-big-data-pipeline/kafka-ec2-aws/conf/application.yaml /home/ec2-user/conf

          echo "Starting Kafka and Kafka UI..."
          export KAFKA_HOME=/home/ec2-user/kafka_2.12-3.8.0
          $KAFKA_HOME/bin/zookeeper-server-start.sh -daemon $KAFKA_HOME/config/zookeeper.properties
          $KAFKA_HOME/bin/kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties
          nohup java -Dspring.config.additional-location=/home/ec2-user/conf/application.yaml --add-opens java.rmi/javax.rmi.ssl=ALL-UNNAMED -jar /home/ec2-user/kafka-ui-api-v0.7.2.jar &

          echo "Building and running the Market Scrapper..."
          cd crypto-big-data-pipeline/apps/BlockchainMarketScrapper
          mvn clean install
          nohup mvn spring-boot:run &

          echo "Running prediction app"
          cd /home/ec2-user/crypto-big-data-pipeline/apps/predict-app
          pip install numpy pandas scikit-learn fastapi uvicorn pickle pydantic
          nohup python3 predict-app/predict-crypto-app.py &

Outputs:
  PublicIp:
    Description: EC2 Instance Public IP
    Value: 
      Fn::GetAtt:
        - EC2Instance
        - PublicIp
  S3BucketName:
    Description: S3 Bucket Name
    Value: 
      Ref: S3Bucket
  PrivateIp:
    Description: EC2 Instance Private IP
    Value: 
      Fn::GetAtt:
        - EC2Instance
        - PrivateIp
  SecurityGroupId:
    Description: Security Group ID
    Value: 
      Fn::GetAtt:
        - DefaultSecurityGroup
        - GroupId
  SubnetId:
    Description: Subnet ID
    Value: 
      Fn::GetAtt:
        - PublicSubnet
        - SubnetId
  VPCID:
    Description: VPC ID
    Value: 
      Fn::GetAtt:
        - MyVPC
        - VpcId

#create s3 folder
#get script file from github
#get data-zip file from github


